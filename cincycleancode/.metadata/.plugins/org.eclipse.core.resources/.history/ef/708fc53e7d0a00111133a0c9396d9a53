package org.codingdojo.roman.numeral.converter;

import org.codingdojo.roman.numeral.type.DigitBoundaryType;

public class Converter {

	public String toNumeral(Integer input) {
		if (input > 3000) {
			throw new IllegalArgumentException(
					"Sorry, we can calculate only upto 3000");
		}
		StringBuilder numeral = new StringBuilder();
		numeral.append(getNumeral(input, 1000));

		return numeral.toString();
	}

	private String getNumeral(Integer input, int limit) {
		StringBuilder numeral = new StringBuilder();
		int firstValue = input / limit;
		int reminder = input % limit;
		DigitBoundaryType limitType = DigitBoundaryType.findType(limit);
		for (int i = 0; i < firstValue; i++) {
			numeral.append(limitType.getSymbol());
		}
		int difference = limit - reminder;
		if (difference == 100) {
			numeral.append(limitType.getPreviousType().getSymbol());
			numeral.append(limitType.getSymbol());
		} else {
			numeral.append(getNumeral(input, type.getPreviousValue()));
		}
		return numeral.toString();
	}

}
